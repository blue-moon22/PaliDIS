process.container = 'bluemoon222/palidis_dependencies:0.0.9'

params {
        get_IS_annotations = false
        create_catalog = false

        manifest = ""
        output_prefix = ""
        batch_name = "batch"

        collect_annotations_script = "./bin/collect_IS_annotations.R"
        min_itr_length = 14
        kmer_length = 10
        split = 20
        cd_hit_G = 0
        cd_hit_aL = 0.0
        cd_hit_aS = 1.0

        partition = "brc"
        clusterOptions = null
}

profiles {

        standard {
                docker {
                        enabled = true
                }
                withName:palmem {
                        cpus = 2
                }
                withName:mapReads {
                        cpus = 2
                }
        }

        lsf {

                docker {
                        enabled = false
                }

                singularity {
                        enabled = true
                        autoMounts = true
                        cacheDir = "$PWD"
                }

                process {
                        errorStrategy = { sleep(task.attempt * 200); return 'ignore' }
      maxRetries = 0
                        withName:convertToFasta {
                                memory = '8000 MB'
                                cpus = 4
                                }
                        withName:palmem {
                                memory = '8000 MB'
                                cpus = 32
                                queue = 'long'
                                }
                        withName:buildDB {
                                memory = '8000 MB'
                                }
                        withName:mapReads1 {
                                memory = '4000 MB'
                                cpus = 16
                                }
                        withName:mapReads2 {
                                memory = '4000 MB'
                                cpus = 16
                                }
                        withName:getCandidateITRs {
                                memory = '16000 MB'
                                }
                        withName:clusterReads {
                                memory = '4000 MB'
                                cpus = 16
                                }
                        withName:getITRs {
                                memory = '16000 MB'
                                }
                        withName:collectAnnotations {
                                memory = '16000 MB'
                                }
                        withName:createITRCatalog {
                                memory = '16000 MB'
                        }
                        withName:assignITRClusters {
                                memory = '8000 MB'
                                cpus = 8
                                queue = 'long'
                        }
                        withName:createISCatalog {
                                memory = '16000 MB'
                        }
      }
                executor {
                        name = "lsf"
                        perJobMemLimit = true
      // Maximum number of jobs to spawn at once - adjust as necessary
      queueSize = 20
      jobName = { "pf_pipeline - $task.name - $task.hash" }
    }
        }
        rosalind {

        docker {
      enabled = false
    }

    singularity {
      enabled = true
      autoMounts = true
      cacheDir = "$PWD"
    }

                process {
                executor = 'slurm'
                //queue = 'brc'
                clusterOptions = { "--partition=$params.partition ${params.clusterOptions ?: ''}" }
      errorStrategy = {task.attempt <= 0 ? 'retry' : 'ignore'}
      maxRetries = 0
                        withName:convertToFasta {
                                memory = '4000 MB'
                                cpus = 4
                }
                        withName:palmem {
                                memory = {64000.MB * task.attempt}
                                cpus = 16
                                clusterOptions = { "--time=6-00:00:00 --partition=$params.partition ${params.clusterOptions ?: ''}" }
                }
                        withName:buildDB {
                                memory = '4000 MB'
                        }
                        withName:mapReads1 {
                                memory = '32000 MB'
                                cpus = 8
                        }
                        withName:mapReads2 {
                                memory = '32000 MB'
                                cpus = 8
                        }
                        withName:getCandidateITRs {
                                memory = '32000 MB'
                                clusterOptions = { "--time=3-00:00:00 --partition=$params.partition ${params.clusterOptions ?: ''}" }
                        }
                        withName:clusterReads {
                                memory = {32000.MB * task.attempt}
                                cpus = 4
                        }
                        withName:getITRs {
                                memory = '16000 MB'
                        }
                        withName:collectAnnotations {
                                memory = {32000.MB * task.attempt}
                        }
                        withName:createITRCatalog {
                                memory = '16000 MB'
                        }
                        withName:assignITRClusters {
                                memory = {64000.MB * task.attempt}
                                cpus = 16
                                clusterOptions = { "--time=3-00:00:00 --partition=$params.partition ${params.clusterOptions ?: ''}" }
                        }
                        withName:createISCatalog {
                                memory = {64000.MB * task.attempt}
                                clusterOptions = { "--time=5-00:00:00 --partition=$params.partition ${params.clusterOptions ?: ''}" }
                        }
                }
                executor {
                        submitRateLimit = '1 sec'
                }
        }
}
